# Events

Let's create a new component.
To kick things off,
let's make a component that `alert`s an incremented click count every time it's clicked.

Let's start with a component function named `ClickCounter`.

```js
const ClickCounter = () => (
  <div onClick={() => alert('1')}>
    (clicks: 0)
  </div>
)
```

Change our `element` assignment to render the `ClickCounter` instead of our `Greeting` component.

```js
const element = <ClickCounter />;
```

Now click the new component.
It will alert every time it's clicked.
Unfortunately, it only ever alerts `1` and always displays `0`.
It's not a great click counter.
But we learned how to use events!

## React Synthetic Events

If you've been around the JavaScript block, this `onClick` prop might look strange.
In HTML the attribute name is `onclick` (all lowercase).
And most frontend developers discourage their use.

React doesn't use the attribute-style event handlers.
It wraps browser-native events in React `SynthenticEvent`s.
It's smart and reliable.
Right now, the details aren't important.
Just note the difference in capitalization.

A list of available React's `SyntheticEvent`s is available at [https://facebook.github.io/react/docs/events.html](https://facebook.github.io/react/docs/events.html).

### Kick the tires

* Play around with different event types. Try `DoubleClick`, `MouseEnter`, and `MouseLeave`.
