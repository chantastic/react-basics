# Arrow functions

Let's learn some new JavaScript.

If there's one new syntax you should commit to memory, it should be [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).
These show up everywhere in React.
And they're a very popular way to define component functions.

Before we talk about new syntax, let's talk about the difference between a [function declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) and a [function expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function).

```js
// function declaration
function Greeting (props) {
  return <div>Hello {props.name}!</div>
}
```

```js
// function expression
var Greeting = function (props) {
  return <div>Hello {props.name}!</div>
}
```

They're very similar.
The first declares a named function.
The second assigns an anonymous function to the variable `Greeting`.

Arrow functions are function expressions.
They assign an anonymous function to a variable.
But they do so with fewer characters.

```js
// function expression
var Greeting = function (props) {
  return <div>Hello {props.name}!</div>
}

// arrow function expression (ES2015)
var Greeting = (props) => <div>Hello {props.name}!</div>;
```

Note the 3 syntax changes:

* The `function` keyword is removed.
* The curly braces are optional (for one liners).
* The `return` value is implied (for one liners).

This syntax is so terse and readable, many folks use it define component functions.

Arrow functions provide one other major benefit that isn't immediately obvious.
We'll talk about that invisible difference later in the book.

### Kick the tires
* For giggles, write an `add` function using an arrow function expression. You can just do it in the Dev Tools console.
* __Advanced:__ Use an arrow function as an argument to a higher order function. `[1,2,3].map()` is a good place to start. Don't use `function`, `return`, or `{}`.
