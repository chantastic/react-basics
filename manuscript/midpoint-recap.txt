# Midpoint Recap

We're going to touch down on everything we learned.
If anything feels unclear, head back to that chapter and work through it again.

## ReactDOM.render

`ReactDOM` connects your React Elements to the browser.
`render` takes arguments, a React Element and a DOM Element Container.
It stuffs the rendered React Element into the Dom container.

```js
var element = React.createElement("div", {children: "hi" })
var DOMContainer = document.getElementById("root")

ReactDOM.render(element, DOMContainer)
```

## JSX

JSX is a syntax for writing the `React.createElment()` function that looks like HTML.
It's *not* HTML and it has to be transformed before the browser can understand it.

These two lines are equivalent:

```js
// JS
React.createElement("div", { id: "greeting", children: "hi" + name})

// JSX
<div id="greeting">hi {name}</div>
```

JSX can be used for React Elements and React components.

```
const Greeting = (props) => <div>Hi {props.name}</div>

ReactDOM.render(
  <Greeting name="Chan" />
  document.getElementById("root")
)
```

## Component functions

React components can be defined as functions.

```
function Greeting() {
  return <div>Hi</div>
}
```

These types of components are commonly written with ES2015 arrow functions.

```
var Greeting = () => <div>Hi</div>
```

## `const`

`const` helps ensure that variables we assign our components to can't be reassigned.

```
const AnIrreplaceableComponent = () => <div>You can't replace me!</div>
```

## props

`props` are passed to React Elements and React components alike.

```
const Greeting = (props) => <div>Hi {props.name}</div>

ReactDOM.render(
  <Greeting name="Chan" />
  document.getElementById("root")
)
```
