# children

There's one last thing to do.
It might have been nagging you for the past few chapters.

Our `Greeting` component isn't being displayed.
Why is that?
It's nested inside `ClickCounter`.
It seems like it should be showing.

```js
var element = <ClickCounter>
  <Greeting name="Chan" />
</ClickCounter>;
```

JSX has a lot of similarities to HTML.
That's what makes it a useful abstraction.
However, its HTML likeness can be misleading.
In this case, we assume that that nested React Elements should be automatically rendered.
That's not the case.

To fix this, we must explicitly render the nested React Elements.

To understand what's happening, let's look our `element` assignment.
Consider how it might be written without JSX.

```js
var element = React.createElement(ClickCounter, {
  children: React.createElement(Greeting, { name: "Chan" })
})
```

`ClickCounter` gets a `children` prop but we don't use it in the `render` function.

Let's fix that.
In between a set of JSX curly braces, add `this.props.children`.

```js
  render() {
    return (
      <div onClick={() => this.setState({clicks: this.state.clicks + 1})}>
        {this.props.children}
        (clicks: {this.state.clicks})
      </div>
    );
  }
```

Now we see the child `Greeting` component, in all it's glory.
It too can be clicked to trigger the `ClickCounter` event.

### Explore

* Add more React Elements nested inside `ClickCounter`. Do they show up as expected?
