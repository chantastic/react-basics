# props

Remember that *props* object from the *createElement* chapter? No? I'll recap:

* The *props* object is a plain old JavaScript object.
* You can put any key/value pair in the *props* object.
* Some keys get special treatment.

We can use that same object with our *Greeting* component. Here, I'm providing *name* as a *prop* to *Greeting. It's value is "chan".

```js
ReactDOM.render(
  React.createElement(Greeting, { name: "Chan" }),
  document.getElementById("root")
)
```

## We call this special object "props"

We've used this special object twice. It's seems fitting to call it by it's name. We call this the `props` object. Every component recieves props. We can put any values we want on the `props` object. It's how we give values to our components.

This helps us make our components dynamic.

## Rendering values from props

Update the `Greeting` function expression to accept the `props` object.

Now, instead of simply displaying "Hi", let's append the `name` on the `props` object.

``` javascript
var Greeting = function (props) {
  return React.createElement("h1", { children: "Hi " + props.name })
}
```

All together, it should look like this:

``` js
var Greeting = function (props) {
  return React.createElement("h1", { children: "Hi " + props.name })
}

ReactDOM.render(
  React.createElement(Greeting, { name: "Chan" }),
  document.getElementById("root")
)
```

## props are values communicated to components

The `props` object is how we communicate values into components. In fact, it's the only way to communicate data into components.

All components take props. The custome components that we create and those who's types are DOM elements.

## Now, for something completely different

We've talked a lot about custom components and DOM element components. It'd be nice to have a way writing these components that felt familiar, the way HTML feels familiar.
