# props

I'm gonna let you in on a little secret.
You already know what `props` are.
I used them to create the initial `h1` element.

Remember the object we pass to `React.createElement` with all the specifications for our element?
That object is called called the `props` object.
It's short for `properties`.

Our component function accepts this `props` object as an argument.

```js
function Greeting (props) {
  // ...
}
```

We can then use keys from the `props` object inside our component.

```js
function Greeting (props) {
  return <div>Hello {props.name}!</div>;
}
```

## JSX Interpolation

In JSX, we use using curly braces to evaluate certain expressions.
Notice that `props.name` is wrapped curly braces.
This communicates to the JSX transformer that `props.name` should be evaluated,
not displayed as a literal string of characters.

## Passing `props` in JSX

Our component is setup to use `props.name`.
But how do we get that `name` prop into the component, now that we're using JSX?
We use attributes, just like we would in HTML.

Add a `name` prop to our `Greeting` element.
I'll use my name.
Feel free to use your own.

```js
var element = <Greeting name="Chan" />;
```

Now we have a component that can be rendered with a dynamic name.
Awesome!

### Kick the tires
* Update the component to take a `punctuation` prop. Then, interplate `props.punctuation` in place of the static `!`.
* __Advanced:__ In chapter two, I suggested that you render `element` into 2 DOM elements. Try that again. This time, render the same component with a different `name`.
