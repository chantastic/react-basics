# componentDidMount

`componentDidMount` is an function that fires right after a component is mounted for the first time.

It's an extremely useful function in React. It gives you a place to fire off AJAX events, make a websocket connection, or fiddle with the DOM.

## Fetching Component Data

We're going to use this function to provide a an initial state for our component.

In our example, we'll use a `setTimeout` to simulate an asynchronous callback. In reality, you'd likely make an AJAX request or connect to websockets.

Say we want to connect to the server and gather how many times a user has clicked on my name over the lifetime of our app, we can can request that inital data using `componentDidMount`.

## Ugh, this

Inside the `componentDidMount` we have to keep a reference to `this`. And use that in our timeout function. Fortunately, it's super easy.

We'll talk in the chapters about ES6, how to do all this in one line.

```
var ClickCounter = React.createClass({
  getInitialState: function () {
    return { clicks: 0 }
  },

  componentDidMount: function () {
    var component = this

    return setTimeout(function () {
      component.setState({ clicks: 100 })
    }, 500)
  },

  handleClick: function () {
     this.setState({ clicks: this.state.clicks + 1 })
  },

  render: function () {
    return <div onClick={this.handleClick}>
      {this.props.children}
      clicks: {this.state.clicks}
    </div>
  }
})

var Greeting = function (props) {
  return <div>{props.name}</div>
}

ReactDOM.render(
  <ClickCounter>
    <Greeting name="Michael Chan" />
  </ClickCounter>,
  document.getElementById("root")
)
```
