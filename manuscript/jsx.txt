# JSX

This chapter is going to be like a game of 20 questions. It's hard to talk about JSX any other way.

## What's JSX?

JSX is a way to write `React.createElement` that reads like HTML.

These two lines are [identical] [1]:

```js
// JavaScript
React.createElement("h1", { children: "Hi" })

// JSX
<h1>Hi</h1>
```

## How can I use JSX?

You can't. Not without a JavaScript transformer.

## What's a JavaScript transformer?

A JavaScript transformer takes JavaScript of one form and transforms it to JavaScript of another.

In our case, we'd like to write fancy-pants JSX and transform it to plain-old JavaScript for the browser to understand.

## Where do I get a JavaScript transformer?

There are a number of JavaScript transformers. The most popular one is [Babel](http://babeljs.io/).
It also has the best support for JSX.

## What's Babel?

Babel is a configurable, pluggable JavaScript transformer. It does a lot.

Right now, we only need it to transform `<h1>Hi</hi>` into `React.createClass("h1", { children: "Hi" })`.

## How do I use JSX in my app?

That depends on what type of app writing.
Fortunately there are a lot of good resources for Rails, .NET, Node, Phoenix, and others.

For our purposes, we just need it to work in our HTML page.

## How do I make it work in an HTML page?

I thought you'd never ask.

## Copy and Paste this into your HTML file

We make two updates to our HTML file to support JSX.
* Add `babel-core` *(version 5.8.23)*
* Update our script tag to be `type="text/babel"`

The new `head` should look like this:

```
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">

  <script src="https://fb.me/react-15.3.2.js"></script>
  <script src="https://fb.me/react-dom-15.3.2.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"></script>
</head>
```

The updated `script` tag should look like this.

```
<script type="text/babel">
  // all the code
</script>
```

## What does type="text/babel" do?

A `script` tag without a `type` must be plain old JavaScript.

Adding the `type="text/babel"` attribute means that we expect Babel to transform the script before it's evaluated as JavaScript.

## I'm still confused

You don't need to understand JSX to learn React.

What you need to know is why `return <div>whatever</div>` doesn't result in a syntax error.
The reason is JSX and Babel.

You'll understand what's going as you use it more.

## How do I update the components we've already written to JSX?

Plain old JavaScript:

```
var Greeting = function (props) {
  return React.createElement("h1", { children: "Hi " + props.name })
}

ReactDOM.render(
  React.createElement(Greeting, { name: "Chan" }),
  document.getElementById("root")
)
```

Babel-transformed, JSX hotness:

```
var Greeting = function (props) {
  return <h1>Hi {props.name}</h1>
}

ReactDOM.render(
  <Greeting name="Chan" />,
  document.getElementById("root")
)
```

## What do the curly braces do?

In JSX, anything inside curly braces will be evaluated as an expression.

```
{1 + 1} // 2
{"Howdy"} // Howdy
{(function (){ return "Yo!" })()} // Yo!
{props.name} // Chan
```

## Do custom components have need a Capital first letter?

Yes.

First, you should Pascal Case all classes.

Second, this communicates to Babel whether or not you are providing a component Class.

```
<div /> // React.createClass("div")
<Div /> // React.createClass(Div)

<greeting /> // React.createClass("greeting")
<Greeting /> // React.createClass(Greeting)
```

Babel transforms any lowercase JSX tags to strings and any capitalized JSX tags to JavaScript variables.

If you use a lowercase JSX tag, React will attempt to create a native DOM element with that name.

## Are all JSX tags self-closing?

Yup.

These are identical in JSX:

```
<div />
<div></div>
```

These are similar.

```
<div children="Hi" />
<div>Hi</div>
```

## Whew!

You made it. Time for coffee, or kambucha, or something.

JSX is interesting.
It's important to learn because it's used in all the React docs.

Unfortunately, the JSX abstraction is "[leaky](http://www.joelonsoftware.com/articles/LeakyAbstractions.html)."
You'll do well to always remember that JSX syntax is just a wrapper around `React.createClass`.

[1] OK. Not *exactly* the identical. I'll show you how I lied later in the book.
