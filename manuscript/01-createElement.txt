# Creating Elements

This chapter includes the most jargon and nonsense I'll gonna throw at you.

## What's a web page?

A webpage is just a bunch of DOM elements. No DOM? No elements? No page. Pretty simple.

We declare elements in different ways, depending on the language used.

We used HTML to create a few elements in the setup chapter. We can also declare elements in JavaScript using `document.createElement`.

So, how do we create elements with React?

## React.createElement

Here's how to create an `h1` element with React.

```
React.createElement("h1")
```

Pretty painless. We call `React.createElement` and pass it the type of element we want to render.

## Optional (but important) arguments

An empty `h1` is nearly as boring as nothing at all. `createElement` takes additional arguments to spice things up.

The second argument it takes is an object. What goes inside is up to us. To kick things off, I'll use special [property named `children`][1]

```
React.createElement("h1", { children: "Hi" })
```

## What are React elements?

React can't do anything you can't do in JavaScript proper. But it can provide some convieniences. React elements are instructions for creating DOM elements.

Log this `createElement` expression to your browser console to see what this instruction set looks like.

`console.log(React.createElement("h1", { children: "Hi" }))`

It should look somethingc like this:

```
{
  /* a bunch of frameworky stuff */
  props: { children: "hi" },
  type: "h1",
}
```

We see that `createElement` creates a new object. It includes the `type` and special object we passed in.

## Ok. So, I have DOM element blue print. How does that become a DOM element?

Now that we've created a Recat element, we need make DOM elemnts and shove them into the DOM. For that we'll use the `ReactDOM`.
