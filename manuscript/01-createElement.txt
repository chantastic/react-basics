# Creating Elements

This chapter is the most jargon and nonsense I'm gonna throw at you. Make it through and you're golden.

## What's a webpage?

A webpage is just a bunch of DOM elements. No DOM? No elements? No page. Simple as that.

You can declare elements in a bunch of ways. We used HTML to create a create an few elements in the setup chapter. We could also use JavaScript to declare elements using `document.createElement`.

So, our first goal is to create elements using React.

## React.createElement

Here's how you create an `h1` element with React.

`React.createElement("h1")`

That was painless. We simply call `React.createElement` and provide the type of element we want to render. Breezy.

## `createElement` optional arguments

Now, and empty `h1` is nearly as boring as nothing at all. So `createElement` additional arguments to spice things up. Let's talk briefly about the second argument.

The second arument should be an object. What goes inside the object is up to us. To kick things off, I'll use special [property named `children`] [1]

`React.createElement("h1", { children: "Hi" })`

## What are React elements?

React elements are instructions for creating DOM elements. Log this `createElement` expression to your browser console to see what this instruction set looks like.

`console.log(React.createElement("h1", { children: "Hi" }))`

It should look somethingc like this:

`
{
  $$typeof: Symbol(react.element),
  /* a bunch of frameworky stuff */
  props: { children: "hi" },
  type: "h1",
}
`

## I have element creation instructions, now what?

Next we need shove them into the browser DOM. For that we'll use the `ReactDOM` library we included.

[1] There are only a handful of special propreties to React. This is one of them.
