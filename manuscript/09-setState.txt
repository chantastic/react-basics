# setState

## NOTES

* setState does exactly as it says, it the state of the component instance.
* state is not shared across instances. so if you use this counter once or 1000 times, each use will keep it's own state.
* Say you have a more complex initial state object with a number of properties: { clicks: 0, friends: [], mood: "good" }
  * you would still only need to call `setState({clicks: this.state.clicks + 1})`. you don't need to be concerned with the other keys.
  * setState will do it's best to merge the new property/value into the old state.
  * you only need to reference the state property you're interested in changing.
  * you don't have to pass a full state object in every time you call setState.

## RESOURCES

## CODE

```
var ClickCounter = React.creatClass({
  getInitialState: function () {
    return { clicks: 0 }
  },

  handleClick: function () {
     this.setState({ clicks: this.state.clicks + 1 })
  },

  render: function () {
    return <div onClick={this.handleClick}>
      clicks: {this.state.clicks}
    </div>
  }
})

ReactDOM.render(
  <ClickCounter />,
  document.getElementById("root")
)
```
