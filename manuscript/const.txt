# const

One new JavaScript bit and we'll get back to React.

`const` is a new way of defining variables.
It's available in the latest version of all modern browsers.

`const` is used like `var` but it differs in a very important way;
it can't be reassigned.

For example, this will throw an exception:

```js
const one = 1;
one = 2
// => TypeError: Attempted to assign to readonly property.
```

This makes const a great fit for expressions you want to ensure don't become reassignedâ€”like a component.
Let's define our `Greeting` component with `const` and ensure that any attempts at reassignment will raise an error.

```js
// es5 var
var Greeting = (props) => <div>Hi {props.name}</div>;

// es2015 const
const Greeting = (props) => <div>Hi {props.name}</div>;
```

### Explore

* Attempt reassigning `Greeting`. What happens?
* __Advanced:__ Add something to `Greeting`s prototype. Do you still get an error? Why not. Do a little research on `const` and find out why.
