# ReactDOM.render

ReactDOM is a tiny library for transforming *React Element*s (we'll learn about those in a second) into DOM elements and inserting the into the DOM. It's used at the top of every browser-based React app.

*ReacDOM.render* takes two arguments: a *ReactElement* and the DOM element you want it appended to.

```js
ReactDOM.render(
  /* Aa React Element */,
  /* A DOM element container */
);
```

## The DOM Element Container

Let's start with the DOM element container.

In our example, we grab the one DOM element we setup in HTML and provide it as the second argument to *ReactDOM.render*.

```js
ReactDOM.render(
  /* A React Element */,
  document.getElementById("root")
);
```

## The React Element

Now for the *React Element*.

We create *React Elements* with the function *React.creatElement*. Here we're creating a *'div'* and passing in an object with some rendering options, which we'll discuss more in the next chapter.

```js
ReactDOM.render(
  React.createElement('div', { children: "Hi there" }),
  document.getElementById("root")
);
```

---

If all you wanted to learn was how to create a *div* using two external libraries and a lot of back-and-forth to the DOM, you're done!

If not, keep reading.
